__author__ = 'Charles'

import unittest
import unum

class MyTestCase(unittest.TestCase):

    def test_Abs(self):
        self.assertEqual(unum.Abs(0), 0)
        self.assertEqual(unum.Abs(0.0), 0.0)
        self.assertEqual(unum.Abs(1), 1)
        self.assertEqual(unum.Abs(1.1), 1.1)
        self.assertEqual(unum.Abs(10), 10)
        self.assertEqual(unum.Abs(1000000.1), 1000000.1)
        self.assertEqual(unum.Abs(12345678901234567890), 12345678901234567890)
        self.assertEqual(unum.Abs(1234567890.1234567890), 1234567890.1234567890)
        self.assertEqual(unum.Abs(-0), 0)
        self.assertEqual(unum.Abs(-0.0), 0.0)
        self.assertEqual(unum.Abs(-1), 1)
        self.assertEqual(unum.Abs(-1.1), 1.1)
        self.assertEqual(unum.Abs(-10), 10)
        self.assertEqual(unum.Abs(-1000000.1), 1000000.1)
        self.assertEqual(unum.Abs(-12345678901234567890), 12345678901234567890)
        self.assertEqual(unum.Abs(-1234567890.1234567890), 1234567890.1234567890)

    def test_BitAnd(self):
        self.assertEqual(unum.BitAnd(1, 1), 1)
        self.assertEqual(unum.BitAnd(0, 1), 0)
        self.assertEqual(unum.BitAnd(1, 0), 0)
        self.assertEqual(unum.BitAnd(0, 0), 0)
        self.assertEqual(unum.BitAnd(0b0, 0b0), 0b0)
        self.assertEqual(unum.BitAnd(0b11111, 0b11111), 0b11111)
        self.assertEqual(unum.BitAnd(0b11111, 0b00000), 0b00000)
        self.assertEqual(unum.BitAnd(0b11111, 0b10101), 0b10101)
        self.assertEqual(unum.BitAnd(0b11111, 0b0), 0b0)
        self.assertEqual(unum.BitAnd(0b11111111111111111111, 0b10000000000000000000), 0b10000000000000000000)
        self.assertEqual(unum.BitAnd(0b111110000, 0b000011111), 0b000010000)

    def test_BitOr(self):
        self.assertEqual(unum.BitOr(1, 1), 1)
        self.assertEqual(unum.BitOr(0, 1), 1)
        self.assertEqual(unum.BitOr(1, 0), 1)
        self.assertEqual(unum.BitOr(0, 0), 0)
        self.assertEqual(unum.BitOr(0b0, 0b0), 0b0)
        self.assertEqual(unum.BitOr(0b11111, 0b11111), 0b11111)
        self.assertEqual(unum.BitOr(0b11111, 0b00000), 0b11111)
        self.assertEqual(unum.BitOr(0b00000, 0b10101), 0b10101)
        self.assertEqual(unum.BitOr(0b11111, 0b0), 0b11111)
        self.assertEqual(unum.BitOr(0b11111111111111111111, 0b10000000000000000000), 0b11111111111111111111)
        self.assertEqual(unum.BitOr(0b111110000, 0b000011111), 0b111111111)

    def test_BitShiftLeft(self):
        self.assertEqual(unum.BitShiftLeft(0b0, 0), 0b0)
        self.assertEqual(unum.BitShiftLeft(0b1, 0), 0b1)
        self.assertEqual(unum.BitShiftLeft(0b101, 0), 0b101)
        self.assertEqual(unum.BitShiftLeft(0b11111111111111111111, 0), 0b11111111111111111111)
        self.assertEqual(unum.BitShiftLeft(0b0, 1), 0b0)
        self.assertEqual(unum.BitShiftLeft(0b1, 1), 0b10)
        self.assertEqual(unum.BitShiftLeft(0b101, 1), 0b1010)
        self.assertEqual(unum.BitShiftLeft(0b11111111111111111111, 1), 0b111111111111111111110)
        self.assertEqual(unum.BitShiftLeft(0b0, 2), 0b0)
        self.assertEqual(unum.BitShiftLeft(0b1, 2), 0b100)
        self.assertEqual(unum.BitShiftLeft(0b101, 2), 0b10100)
        self.assertEqual(unum.BitShiftLeft(0b11111111111111111111, 2), 0b1111111111111111111100)
        self.assertEqual(unum.BitShiftLeft(0b0, 4), 0b0)
        self.assertEqual(unum.BitShiftLeft(0b1, 4), 0b10000)
        self.assertEqual(unum.BitShiftLeft(0b101, 4), 0b1010000)
        self.assertEqual(unum.BitShiftLeft(0b11111111111111111111, 4), 0b111111111111111111110000)
        self.assertEqual(unum.BitShiftLeft(0b0, 20), 0b0)
        self.assertEqual(unum.BitShiftLeft(0b1, 20), 0b100000000000000000000)
        self.assertEqual(unum.BitShiftLeft(0b101, 20), 0b10100000000000000000000)
        self.assertEqual(unum.BitShiftLeft(0b11111111111111111111, 20), 0b1111111111111111111100000000000000000000)

    def test_BitShiftRight(self):
        self.assertEqual(0b0 >> 0, 0b0)
        self.assertEqual(0b1 >> 0, 0b1)
        self.assertEqual(0b101 >> 0, 0b101)
        self.assertEqual(0b11111111111111111111 >> 0, 0b11111111111111111111)
        self.assertEqual(0b0 >> 1, 0b0)
        self.assertEqual(0b1 >> 1, 0b0)
        self.assertEqual(0b101 >> 1, 0b10)
        self.assertEqual(0b11111111111111111111 >> 1, 0b1111111111111111111)
        self.assertEqual(0b0 >> 2, 0b0)
        self.assertEqual(0b1 >> 2, 0b0)
        self.assertEqual(0b101 >> 2, 0b1)
        self.assertEqual(0b11111111111111111111 >> 2, 0b111111111111111111)
        self.assertEqual(0b0 >> 4, 0b0)
        self.assertEqual(0b1 >> 4, 0b0)
        self.assertEqual(0b101 >> 4, 0b0)
        self.assertEqual(0b11111111111111111111 >> 4, 0b1111111111111111)
        self.assertEqual(0b0 >> 20, 0b0)
        self.assertEqual(0b1 >> 20, 0b0)
        self.assertEqual(0b101 >> 20, 0b0)
        self.assertEqual(0b1111111111111111111100000000000000000000>> 20, 0b11111111111111111111)

    def test_BitXor(self):
        self.assertEqual(1 ^ 1, 0)
        self.assertEqual(0 ^ 1, 1)
        self.assertEqual(1 ^ 0, 1)
        self.assertEqual(0 ^ 0, 0)
        self.assertEqual(0b0 ^ 0b0, 0b0)
        self.assertEqual(0b11111 ^ 0b11111, 0b00000)
        self.assertEqual(0b11111 ^ 0b00000, 0b11111)
        self.assertEqual(0b00000 ^ 0b10101, 0b10101)
        self.assertEqual(0b11111 ^ 0b0, 0b11111)
        self.assertEqual(0b11111111111111111111 ^ 0b10000000000000000000, 0b01111111111111111111)
        self.assertEqual(0b111110000 ^ 0b000011111, 0b111101111)

    def test_Boole(self):
        self.assertEqual(unum.Boole(True), 1)
        self.assertEqual(unum.Boole(False), 0)

    def test_Ceiling(self):
        self.assertEqual(unum.Ceiling(0.0), 0)
        self.assertEqual(unum.Ceiling(1.0), 1)
        self.assertEqual(unum.Ceiling(1.5), 2)
        self.assertEqual(unum.Ceiling(9.999), 10)
        self.assertEqual(unum.Ceiling(1.001), 2)
        self.assertEqual(unum.Ceiling(1.0001), 2)
        self.assertEqual(unum.Ceiling(1.000001), 2)
        self.assertEqual(unum.Ceiling(1.00000001), 2)
        self.assertEqual(unum.Ceiling(1.0000000001), 2)
        self.assertEqual(unum.Ceiling(1.0000000000001), 2)
        self.assertEqual(unum.Ceiling(1.000000000000001), 2)
        self.assertEqual(unum.Ceiling(1.00000000000000001), 1)
        # self.assertEqual(unum.Ceiling(1.00000000000000001), 2)
        self.assertEqual(unum.Ceiling(1.0000000000000000001), 1)
        # self.assertEqual(unum.Ceiling(1.0000000000000000001), 2)
        self.assertEqual(unum.Ceiling(1.000000000000000000001), 1)
        # self.assertEqual(unum.Ceiling(1.000000000000000000001), 2)
        self.assertEqual(unum.Ceiling(100000000000000000000.1), 100000000000000000000)
        # self.assertEqual(unum.Ceiling(100000000000000000000.1), 100000000000000000001)
        self.assertEqual(unum.Ceiling(-1.0), -1)
        self.assertEqual(unum.Ceiling(-1.5), -1)
        self.assertEqual(unum.Ceiling(-9.999),-9)
        self.assertEqual(unum.Ceiling(-1.999), -1)
        self.assertEqual(unum.Ceiling(-1.9999), -1)
        self.assertEqual(unum.Ceiling(-1.999999), -1)
        self.assertEqual(unum.Ceiling(-1.99999999), -1)
        self.assertEqual(unum.Ceiling(-1.9999999999), -1)
        self.assertEqual(unum.Ceiling(-1.9999999999999), -1)
        self.assertEqual(unum.Ceiling(-1.999999999999999), -1)
        self.assertEqual(unum.Ceiling(-1.99999999999999999), -2)
        # self.assertEqual(unum.Ceiling(-1.99999999999999999), -1)
        self.assertEqual(unum.Ceiling(-1.9999999999999999999), -2)
        # self.assertEqual(unum.Ceiling(-1.9999999999999999999), -1)
        self.assertEqual(unum.Ceiling(-1.999999999999999999999), -2)
        # self.assertEqual(unum.Ceiling(-1.999999999999999999999), -1)
        self.assertEqual(unum.Ceiling(-99999999999999999999.9), -100000000000000000000)
      # self.assertEqual(unum.Ceiling(-99999999999999999999.9),  -99999999999999999999)

if __name__ == '__main__':
    unittest.main()
